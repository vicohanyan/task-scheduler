openapi: 3.0.3
info:
  title: Task Scheduler API
  version: 1.3.0
  description: |
    REST API for managing tasks and users.
    Auth uses Laravel Sanctum Personal Access Tokens (Bearer).
    All errors are JSON.

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: Auth
  - name: Tasks
  - name: Users

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "Sanctum Token"

  schemas:
    ErrorMessage:
      type: object
      properties:
        message: { type: string, example: "Unauthenticated" }

    ValidationError:
      type: object
      properties:
        message: { type: string, example: "Validation failed" }
        errors:
          type: object
          additionalProperties:
            type: array
            items: { type: string }

    Task:
      type: object
      properties:
        id: { type: integer, example: 123 }
        name: { type: string, example: "Fix login bug" }
        description: { type: string, nullable: true, example: "Null pointer edge case" }
        status:
          type: string
          enum: [todo, in_progress, done, blocked]
          example: todo
        priority:
          type: integer
          minimum: 0
          maximum: 127
          example: 42
        due_date:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-12T17:52:13Z"
        assigned_user_id:
          type: integer
          nullable: true
          example: null
        assignee:
          type: object
          nullable: true
          properties:
            id: { type: integer, example: 7 }
            name: { type: string, example: "Alice" }
        statusInfo:
          type: object
          properties:
            code: { type: string, example: "todo" }
            display_name: { type: string, example: "To Do" }

    User:
      type: object
      properties:
        id: { type: integer, example: 7 }
        name: { type: string, example: "Alice" }
        email: { type: string, example: "alice@example.com" }
        available: { type: boolean, example: true }

    KanbanTask:
      type: object
      properties:
        id: { type: integer, example: 5 }
        name: { type: string, example: "Implement drag-n-drop" }
        description: { type: string, nullable: true }
        status:
          type: string
          enum: [todo, in_progress, done, blocked]
          example: in_progress
        priority:
          type: integer
          minimum: 0
          maximum: 127
          example: 3
        due_date:
          type: string
          format: date-time
          nullable: true
        assigned_user_id:
          type: integer
          nullable: true
        assignee:
          type: object
          nullable: true
          properties:
            id: { type: integer, example: 10 }
            name: { type: string, example: "Shania Kub Sr." }

    KanbanColumn:
      type: object
      properties:
        code:
          type: string
          enum: [todo, in_progress, done, blocked]
          example: todo
        display_name:
          type: string
          example: "To Do"
        tasks:
          type: array
          items: { $ref: "#/components/schemas/KanbanTask" }

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string }
                password_confirmation: { type: string }
            examples:
              ok:
                value:
                  name: "Alice"
                  email: "alice@example.com"
                  password: "secret123"
                  password_confirmation: "secret123"
      responses:
        "201":
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/User" }
                  token: { type: string, example: "1|pAt0ken..." }
        "422":
          description: Validation failed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
            examples:
              ok:
                value:
                  email: "alice@example.com"
                  password: "secret123"
      responses:
        "200":
          description: Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/User" }
                  token: { type: string, example: "2|pAt0ken..." }
        "422":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (revoke current token)
      security: [{ BearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Logged out" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

  /tasks:
    post:
      tags: [Tasks]
      summary: Create task
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string, nullable: true }
                status:
                  type: string
                  enum: [todo, in_progress, done, blocked]
                priority:
                  type: integer
                  minimum: 0
                  maximum: 127
                assigned_user_id:
                  type: integer
                  nullable: true
                  description: "Must refer to available user"
                due_date:
                  type: string
                  format: date-time
                  nullable: true
            examples:
              ok-minimal:
                value:
                  name: "Test task"
              ok-full:
                value:
                  name: "Task with due date"
                  description: "Short description"
                  status: "todo"
                  priority: 21
                  assigned_user_id: null
                  due_date: "2025-09-12T17:52:13Z"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Task" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "422":
          description: Validation failed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

    get:
      tags: [Tasks]
      summary: Get tasks
      description: "Filters via query params: search, status, assigned_user_id"
      security: [{ BearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string, minLength: 2, maxLength: 255 }
        - in: query
          name: status
          schema:
            type: string
            enum: [todo, in_progress, done, blocked]
        - in: query
          name: assigned_user_id
          schema: { type: integer }
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Task" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

  /tasks/kanban:
    get:
      tags: [Tasks]
      summary: Get tasks grouped by status (Kanban)
      description: "Returns columns with tasks grouped by status. Same filters as /tasks."
      security: [{ BearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string, minLength: 2, maxLength: 255 }
          description: "Prefix on name; substring on description"
        - in: query
          name: assigned_user_id
          schema: { type: integer }
          description: "Filter by assignee"
      responses:
        "200":
          description: Kanban columns
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/KanbanColumn" }
              examples:
                example:
                  value:
                    - code: "todo"
                      display_name: "To Do"
                      tasks:
                        - { id: 1, name: "Task 1", description: null, status: "todo", priority: 0, due_date: "2025-09-17T14:41:33Z", assigned_user_id: 6, assignee: { id: 6, name: "Bridget Goldner MD" } }
                        - { id: 4, name: "Task 4", description: "Short", status: "todo", priority: 1, due_date: "2025-09-16T14:41:33Z", assigned_user_id: 10, assignee: { id: 10, name: "Shania Kub Sr." } }
                    - code: "in_progress"
                      display_name: "In Progress"
                      tasks:
                        - { id: 3, name: "Task 3", description: null, status: "in_progress", priority: 0, due_date: "2025-09-15T14:41:33Z", assigned_user_id: 10, assignee: { id: 10, name: "Shania Kub Sr." } }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

  /tasks/{task}:
    get:
      tags: [Tasks]
      summary: Get single task
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: task
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Task" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

    put:
      tags: [Tasks]
      summary: Update task
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: task
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string, nullable: true }
                status:
                  type: string
                  enum: [todo, in_progress, done, blocked]
                priority:
                  type: integer
                  minimum: 0
                  maximum: 127
                assigned_user_id: { type: integer, nullable: true }
                due_date: { type: string, format: date-time, nullable: true }
            examples:
              ok-update:
                value:
                  name: "Updated title"
                  status: "in_progress"
                  priority: 7
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Task" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "422":
          description: Validation failed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

    delete:
      tags: [Tasks]
      summary: Delete task
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: task
          required: true
          schema: { type: integer }
      responses:
        "204":
          description: Task deleted
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

  /users:
    get:
      tags: [Users]
      summary: Get users
      security: [{ BearerAuth: [] }]
      parameters:
        - in: query
          name: available
          schema: { type: boolean }
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }

  /users/{user}/availability:
    patch:
      tags: [Users]
      summary: Toggle availability
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: user
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Availability updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, example: 7 }
                  available: { type: boolean, example: false }
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
